// services/firebase.ts - ИСПРАВЛЕННАЯ ВЕРСИЯ
import { initializeApp } from 'firebase/app';
import { getFirestore, collection, addDoc, doc, setDoc, getDocs, query, where, orderBy, updateDoc, getDoc, limit } from 'firebase/firestore';
import { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, updateProfile, onAuthStateChanged } from 'firebase/auth';
import { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';

const firebaseConfig = {
  apiKey: 'AIzaSyBC5Fx11DwQU3zo_Rol_x5USKC_Z7fScJA',
  authDomain: 'praniebrightwaw.firebaseapp.com',
  projectId: 'praniebrightwaw',
  storageBucket: 'praniebrightwaw.firebasestorage.app',
  messagingSenderId: '199792015841',
  appId: '1:199792015841:web:15c8d2bd325466f01f3aa0',
};

const app = initializeApp(firebaseConfig);
export const db = getFirestore(app);
export const auth = getAuth(app);
export const storage = getStorage(app);

const googleProvider = new GoogleAuthProvider();

export const signInWithGoogle = () => signInWithPopup(auth, googleProvider);

export const registerWithEmail = async (email: string, password: string, name: string, phone?: string, role?: string) => {
  try {
    // Создаем пользователя в Firebase Auth
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    const user = userCredential.user;
    
    // Обновляем профиль пользователя
    await updateProfile(user, { displayName: name });
    
    // Сохраняем дополнительную информацию в Firestore
    await setDoc(doc(db, 'users', user.uid), {
      uid: user.uid,
      name: name,
      email: email,
      phone: phone || '',
      role: role || 'client',
      createdAt: new Date(),
      updatedAt: new Date()
    });
    
    console.log('Пользователь успешно зарегистрирован и данные сохранены');
    return userCredential;
  } catch (error) {
    console.error('Ошибка при регистрации пользователя:', error);
    throw error;
  }
};

export const loginWithEmail = (email: string, password: string) =>
  signInWithEmailAndPassword(auth, email, password);

export const addOrder = async (order: any) => {
  try {
    // Очищаем undefined значения
    const cleanedOrder: any = {
      userId: order.userId,
      carpetArea: order.carpetArea || '',
      chairCount: order.chairCount || 0,
      armchairCount: order.armchairCount || 0,
      sofaCount: order.sofaCount || 0,
      mattressCount: order.mattressCount || 0,
      withPillows: order.withPillows || false,
      additionalInfo: order.additionalInfo || '',
      images: order.images || [],
      createdAt: new Date(), // Используем Date объект вместо ISO строки
      price: order.price || '---'
    };

    // Добавляем scheduledDate только если он определен
    if (order.scheduledDate) {
      cleanedOrder.scheduledDate = new Date(order.scheduledDate);
    }

    const docRef = await addDoc(collection(db, 'orders'), cleanedOrder);
    console.log('Заказ сохранен с ID:', docRef.id);
    return docRef.id;
  } catch (error) {
    console.error('Подробная ошибка при сохранении заказа:', error);
    throw error;
  }
};

// Интерфейс для отзывов - ИСПРАВЛЕННАЯ ВЕРСИЯ
export interface Review {
  id?: string;
  userId: string;
  userName: string;
  userEmail: string;
  orderId?: string; // ОПЦИОНАЛЬНОЕ поле
  rating: number; // 1-5
  comment: string;
  photos?: string[]; // URL фотографий (опциональное)
  serviceType: string; // 'furniture', 'carpet', 'mattress'
  createdAt: Date;
  isApproved: boolean; // для модерации
  isPublished: boolean;
}

// Добавить отзыв - ИСПРАВЛЕННАЯ ВЕРСИЯ
export const addReview = async (reviewData: Omit<Review, 'id' | 'createdAt' | 'isApproved' | 'isPublished'>) => {
  try {
    // Очищаем undefined значения и заменяем их на null или удаляем
    const cleanedData: any = {
      userId: reviewData.userId,
      userName: reviewData.userName,
      userEmail: reviewData.userEmail,
      rating: reviewData.rating,
      comment: reviewData.comment,
      serviceType: reviewData.serviceType,
      photos: reviewData.photos || [], // Пустой массив вместо undefined
      createdAt: new Date(),
      isApproved: false, // требует модерации
      isPublished: false
    };

    // Добавляем orderId только если он есть (не undefined)
    if (reviewData.orderId) {
      cleanedData.orderId = reviewData.orderId;
    }
    
    const docRef = await addDoc(collection(db, 'reviews'), cleanedData);
    console.log('Отзыв добавлен с ID:', docRef.id);
    return docRef.id;
  } catch (error) {
    console.error('Ошибка при добавлении отзыва:', error);
    throw error;
  }
};

// Получить все одобренные отзывы для главной страницы
export const getApprovedReviews = async (limitCount: number = 10) => {
  try {
    const reviewsQuery = query(
      collection(db, 'reviews'),
      where('isApproved', '==', true),
      where('isPublished', '==', true),
      orderBy('createdAt', 'desc'),
      limit(limitCount)
    );
    
    const reviewsSnapshot = await getDocs(reviewsQuery);
    return reviewsSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
      createdAt: doc.data().createdAt?.toDate() || new Date() // Конвертируем Timestamp в Date
    })) as Review[];
  } catch (error) {
    console.error('Ошибка при получении отзывов:', error);
    return [];
  }
};

// Получить отзывы пользователя
export const getUserReviews = async (userId: string) => {
  try {
    const reviewsQuery = query(
      collection(db, 'reviews'),
      where('userId', '==', userId),
      orderBy('createdAt', 'desc')
    );
    
    const reviewsSnapshot = await getDocs(reviewsQuery);
    return reviewsSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
      createdAt: doc.data().createdAt?.toDate() || new Date() // Конвертируем Timestamp в Date
    })) as Review[];
  } catch (error) {
    console.error('Ошибка при получении отзывов пользователя:', error);
    return [];
  }
};

// Получить все отзывы для админки (включая неодобренные)
export const getAllReviews = async () => {
  try {
    const reviewsQuery = query(
      collection(db, 'reviews'),
      orderBy('createdAt', 'desc')
    );
    
    const reviewsSnapshot = await getDocs(reviewsQuery);
    return reviewsSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
      createdAt: doc.data().createdAt?.toDate() || new Date() // Конвертируем Timestamp в Date
    })) as Review[];
  } catch (error) {
    console.error('Ошибка при получении всех отзывов:', error);
    return [];
  }
};

// Обновить отзыв (например, добавить фотографии)
export const updateReview = async (reviewId: string, updateData: Partial<Review>) => {
  try {
    // Удаляем undefined значения
    const cleanedData: any = {};
    Object.keys(updateData).forEach(key => {
      const value = (updateData as any)[key];
      if (value !== undefined) {
        cleanedData[key] = value;
      }
    });

    await updateDoc(doc(db, 'reviews', reviewId), {
      ...cleanedData,
      updatedAt: new Date()
    });
    console.log('Отзыв обновлен:', reviewId);
  } catch (error) {
    console.error('Ошибка при обновлении отзыва:', error);
    throw error;
  }
};

// Одобрить отзыв (только для админов)
export const approveReview = async (reviewId: string) => {
  try {
    await updateDoc(doc(db, 'reviews', reviewId), {
      isApproved: true,
      isPublished: true,
      approvedAt: new Date()
    });
    console.log('Отзыв одобрен:', reviewId);
  } catch (error) {
    console.error('Ошибка при одобрении отзыва:', error);
    throw error;
  }
};

// Отклонить отзыв
export const rejectReview = async (reviewId: string) => {
  try {
    await updateDoc(doc(db, 'reviews', reviewId), {
      isApproved: false,
      isPublished: false,
      rejectedAt: new Date()
    });
    console.log('Отзыв отклонен:', reviewId);
  } catch (error) {
    console.error('Ошибка при отклонении отзыва:', error);
    throw error;
  }
};

// Загрузить фото для отзыва
export const uploadReviewPhoto = async (file: File, reviewId: string): Promise<string> => {
  try {
    const storageRef = ref(storage, `reviews/${reviewId}/${Date.now()}_${file.name}`);
    const snapshot = await uploadBytes(storageRef, file);
    const downloadURL = await getDownloadURL(snapshot.ref);
    return downloadURL;
  } catch (error) {
    console.error('Ошибка при загрузке фото:', error);
    throw error;
  }
};

// Получить средний рейтинг по типу услуги - ИСПРАВЛЕННАЯ ВЕРСИЯ
export const getAverageRating = async (serviceType?: string) => {
  try {
    let reviewsQuery;
    
    if (serviceType) {
      reviewsQuery = query(
        collection(db, 'reviews'),
        where('isApproved', '==', true),
        where('isPublished', '==', true),
        where('serviceType', '==', serviceType)
      );
    } else {
      reviewsQuery = query(
        collection(db, 'reviews'),
        where('isApproved', '==', true),
        where('isPublished', '==', true)
      );
    }
    
    const reviewsSnapshot = await getDocs(reviewsQuery);
    const reviews = reviewsSnapshot.docs.map(doc => doc.data());
    
    if (reviews.length === 0) return 0;
    
    const totalRating = reviews.reduce((sum, review) => sum + (review.rating || 0), 0);
    return totalRating / reviews.length;
  } catch (error) {
    console.error('Ошибка при подсчете среднего рейтинга:', error);
    // Возвращаем 0 вместо ошибки для лучшего UX
    return 0;
  }
};

export { onAuthStateChanged };